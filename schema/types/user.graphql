input CreateUserInfo {
    username:String!
    password:String!
    email:String!
    displayName: String!
}

type CreateUserOutputInfo {
    username:String!
    email:String!
    displayName: String!
}

type User {
    id: String!
    username: String!
    email: String!
    displayName: String!
    registerTime: String!
    isValidEmail: Boolean!
    avatar:String!
    loginTime: String!
    realName: String!
    intro: String!
    city: String!
    companyName: String!
    companyTitle: String!
    github: String!
    blog: String!
    payQRCode: String!
    followers: [User!]!
    followings: [User!]!
}

type UserWithA {
    id: String!
    username: String!
    email: String!
    displayName: String!
    registerTime: String!
    isValidEmail: Boolean!
    avatar:String!
    loginTime: String!
    realName: String!
    intro: String!
    city: String!
    companyName: String!
    companyTitle: String!
    github: String!
    blog: String!
    payQRCode: String!
    followers: [User!]!
    followings: [User!]!
    role: Int!
}

type RegisterUser {
    id: String!
    username: String!
    email: String!
    displayName: String!
    registerTime: String!
    isValidEmail: Boolean!
    avatar:String!
}

type LoginRes {
    user: User!
    token: String!
}